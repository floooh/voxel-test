//------------------------------------------------------------------------------
//  shaders.shd
//  Draw voxel meshes generated by stb_voxel_render
//------------------------------------------------------------------------------

@uniform_block vsParams VSParams
mat4 mvp ModelViewProjection
mat4 model Model
vec4[6] normal_table NormalTable
vec4[32] color_table ColorTable
vec3 light_dir LightDir
vec3 scale Scale
vec3 translate Translate
vec3 tex_translate TexTranslate
@end

@vs vs
@use_uniform_block vsParams
@in vec4 position
@in vec4 normal
@out vec4 facedata
@out vec3 voxelspace_pos
@out vec3 color
@out float amb_occ

    // manually extract position and normal into range 0..255
    vec4 p = position * 256.0;
    vec4 n = normal * 256.0;

    facedata = n.xyzw;

    vec3 offset = p.xzy;
    amb_occ  = p.w;

    voxelspace_pos = offset * scale.xzy;

    int normal_index = int(mod(n.w / 4.0, 6.0));
    vec3 face_normal = mul(model, normal_table[normal_index]).xzy;
    float l = clamp(dot(face_normal, light_dir), 0.0, 1.0) + 0.4;
    int color_index = int(mod(facedata.z, 32.0));
    color = color_table[color_index].xyz * l;

    vec4 wp = vec4(voxelspace_pos + translate.xzy, 1.0);
    _position = mul(mvp, wp);
@end

@fs fs
@in vec4 facedata
@in vec3 voxelspace_pos
@in vec3 color
@in float amb_occ
    _color = vec4(color, 1.0);
@end

@program Shader vs fs
